#from Replit

Day 1: Print Statements
To put any text on screen, it has to be in quotes "", and those quotes have to be in brackets () with a lower case print in front.
A bunch of text is called a String.
Ex: print("Hello There")
Use the triple quote """ if you want to write a big chunk of text with gaps or line breaks.
Ex: print("""Anything that starts
with three quotes, and ends
in three quotes can span
many lines and even contain " symbols
within it without freaking anything out!""")
END LESSON 1

Day 2: Input
Input is when the user gives information to the computer.
It's very similar to the print command, except that it'll show the message in the console then wait until the user has typed something into the console and pressed enter.
Ex: input("What's your name?: ")
-
Input asks for something, takes it, but then has nowhere to put it. 
We can change that with a variable which is a value that we can use to name and store data.
You can give a variable any name you want, but you can't use spaces. You can use:
underscores_between_words (snake case)
camelCaseToMakeItEasierToRead
Ex: 
myName = input("What's you name? ")
myAge = input("How old are you? ")
-
You can print your variable using print and the name you used for your variable in your input command.
Ex:
print(myName)
print(myAge)
END LESSON 2

Day 3: Concatenate
All it really means is combine text (remember, text is called a string) and variables together into single sentences!
EX:
myName = input("What's your name? ")
myLunch = input("What are you having for lunch? ")
print(myName, "is going to be chowing down on", myLunch, "very soon!")
-
With the print function, we can print out as many different things as we please. 
All we have to do is plant a comma , between every different thing in the ()
END LESSON 3

Day 5: If Statements
These statements are a bit like asking a question. You are telling the computer: if something is true, then do this specific block of code.
Double equals (==) is asking the computer to compare if these two things are exactly the same.
In the code below, I am asking if the variable myName is the same as the string Joseph.
-
myName = input("What's your name?: ")
if myName == "Joseph":
-
To create a print statement related to the input from the if statement, you must go to the next line and indent once.
-
myName = input("What's your name?: ")
if myName == "David":
  print("Welcome Dude!")
-
If the condition is not met with the if statement, then we want the computer to do the else part instead. 
Likewise, if the condition is met in the if statement, then the else bit is ignored by the computer. 
The else statement must be the first thing unindented after the if statement and in line with it.
-
myName = input("What's your name?: ")
if myName == "David":
 print("Welcome Dude!")
 print("You're just the baldest dude I've ever seen")
else:
 print("Who on earth are you?!")
-
END LESSON 5

Day 6: Elif and 'and'
The elif command (which stands for 'elseif') allows you to ask more questions using the same input. 
You can have as many statements as you want, but they must go in between if and else and have the same indentation.
The print statements in your elif command need to line up with the indent of the other print statements.
-
print("SECURE LOGIN")
username = input("Username > ")

if username == "mark":
  print("Welcome Mark!")
elif username == "suzanne":
  print("Hey there Suzanne!")
else:
  print("Go away!")
-
You can also add an 'and' to the if statements to make them more complex.
-
print("SECURE LOGIN")
username = input("Username > ")
password = input("Password> ")

if username == "mark" and password == "password":
 print("Welcome Mark!")
elif username == "suzanne" and password == "Su74nne":
 print("Hey there Suzanne!")
else:
 print("Go away!")
-
END LESSON 6

Day 7: Nesting
Nesting is where we put an if statement within an if statement by indenting.
The second if statement within the first if statement must be indented and its print statement needs to be indented one more time.
-
tvShow = input("What is your favorite tv show? ")
if tvShow == "dbz":
  print("Oh Yeah!")
  faveCharacter = input("Who is your favorite character? ")
  if faveCharacter == "goku":
    print("KAMEHAMEHA")
  else:
    print("not goku?")
elif tvShow == "one piece":
  print("Straw Hat pirates, baby")
else:
  print("nice")
-
END LESSON 7

Day 8: or
A Logical Condition (and, or, not) like 'or' comes in handy by conjoining if statements which allows multiple inputs.
-
name = input("Name: ")
if name == "Joe" or name == "joe":
  print("Yo Joe")
-
END LESSON 8

Day 9: Casting


Day 57: Recursion
Recursion is a type of program where you get a subroutine to call itself. 
Recursion lets us solve problems in a more human way. 
Some mathematical problems can just be solved better using recursion.
Ex: We want to print out a sequence of the same emoji, reducing by 2 emojis per line. (eg print a row of 9, then a row of 7, then 5, etc. until we get none).
Ex:
def reverse(value):
  if value <= 0:
    print("Done!")
    return
  # This `if` provides the 'stop' condition for the program. Otherwise it would run forever.
  else: # if we're not at the stop condition.
    for i in range(value):
      print("ðŸ’¯", end="") # Outputs 'value' emojis
    print() # New line
    reverse(value - 2) # takes 2 off the value and calls the subroutine again with this new number. Eg if value was 7 it would call 'reverse(value)' again with value as 5.
reverse(5)
END LESSON 57

Day 58: Debugger
See lesson

Day 60: Unix Epoch
Computers use something called the Unix epoch to measure time.

It counts the amount of seconds elapsed since Jan 1st, 1970 (even when the power's off - there's a small battery on your motherboard that keeps this function running).
To use the Unix epoch, we first need to import the datetime library
Ex: import datetime
-
You can then insert a date and assign it to a variable. You HAVE to use the year -> month -> day format for your arguments.
Ex:
import datetime
myDate = datetime.date(year=2022, month=12, day= 7)
print(myDate)
# This code outputs '2022-12-07'
-
You can also use datetime to automatically get today's date.
Ex:
import datetime
today = datetime.date.today()
print(today)
# This code outputs the current date from your computer's clock.
-
...or you can get the date from the user as serperate variables.
Ex:
import datetime
day = int(input("Day: ")) # Get all input as numbers. We're not at text input for months yet.
month = int(input("Month: "))
year = int(input("Year: "))
date = datetime.date(year, month, day)
print(date)
-
Delta is a computer science term that means the difference between two things.
A time delta is a difference in time.
Ex:
import datetime

today = datetime.date.today() # Today's date

difference = datetime.timedelta(days=14) # The difference I want

newDate = today + difference # Add today to the delta difference to see the date in 14 days time.

print(newDate)
-
Provided you've formatted the date correctly, you can use the > == and < comparison operators just like you can with integers.
Ex:
import datetime

today = datetime.date.today() # Today's date

holiday = datetime.date(year = 2022, month = 10, day = 30) # The date of my holiday

if holiday > today: # If my holiday is in the future
  print("Coming soon")
elif holiday < today: #If my holiday date has passed
  print("Hope you enjoyed it")
else: # If my holiday date is today
  print("HOLIDAY TIME!")
-
END LESSON 60

Day 63: Multiple Files
Your programs can consist of more than one python file. 
The main file will always run first, but you can put parts of your code into other files and bring them in to main.py by importing.
In fact, you've already done this whenever you've used import random, import time, import os and so on. 
It's just that on those occasions, you were importing code written by someone else.
Put this into a new files and name it test.py. 
-
for i in range(10):
  print(i+1)
-
The .py is important to specify that it's a pyhton file.
Go to your main.py file and add this code.
-
import test # No need for the .py
-
Now run the code and watch the 'count to 10' program execute.
Like this we can't control when the 'count to 10' program runs. It just runs on import.
Back in your test.py file, you need to make the countdown program a subroutine.
-
def countdown():
  for i in range(10):
    print(i+1)
-
...and then call it in our main.py file.
-
import test
print("Countdown")
test.countdown() # Test refers to the file, countdown to the subroutine in that file.
-
If your file name is really long, you can give it a pseudonym, or nickname. 
This will save you time every time you want to run a subroutine from that file.
Use as to nickname your file. Here I've used tt for the test file.
-
import test as tt

print("Countdown")
tt.countdown()
-
END LESSON 63

Day 64: OOP
Object Oriented Programming (OOP) is a programming paradigm (a way of thinking about how to solve a problem)
that is based on classes and objects, which store all of their data and behavoirs inside them.
A class is like a cookie cutter or a template. It has pre-defined characteristics (shape, size etc).
Objects are like the cookies created using the cutter...
They all get the same size and shape, but then we can personalize each one (sprinkles, icing, etc).
Java, for example, is based on OOP.
This approach lets us create a template for something like an enemy in a video game, and then use that template to create, say, 20 enemies. 
Instead of having to code each one individually.
CLASSES AND INSTANTIATION
Our first template, or class, is animals. Our class will contain all the characteristics that animals have in common.
This is just a template. All the characteristics are set to 'None' in the template and
we will customize these values when we use the template to create each animal. 
-
class animal:
  species = None
  name = None
  sound = None
  # Sets the characteristics
-
The values will be passed as arguments into the __init__ subroutine inside each animal object.
We also want to create a subroutine called init (short for initialisation) 
which tells the class what to do when it is used to create each instance of an animal.
-
class animal:
  species = None
  name = None
  sound = None
  # Sets the characteristics

  def __init__(self, name, species, sound):
    self.name = name
    self.species = species
    self.sound = sound
-
Instantiation means 'use the template to create an object'. Like pressing the cutter into the dough to make a cookie.

ðŸ‘‰ Let's instantiate a dog object and output his name.
-
class animal:
  species = None
  name = None
  sound = None
  # Sets the characteristics

  def __init__(self, name, species, sound):
    self.name = name
    self.species = species
    self.sound = sound

##### THE NEW BIT ################
dog = animal("Brian", "Canine", "Woof")
# Use the animal class to create a new object called 'dog' with the following parameters.
print(dog.name)
-
ðŸ‘‰ I can use the animal() class to create as many different animals as I want.
-
class animal:
  species = None
  name = None
  sound = None
  # Sets the characteristics

  def __init__(self, name, species, sound):
    self.name = name
    self.species = species
    self.sound = sound

dog = animal("Brian", "Canine", "Woof")
print(dog.name)

##### THE NEW BIT ################
cow = animal("Ermintrude", "Bo Taurus", "Moo")
print(cow.sound)
-
Subroutines inside an object are called methods.

ðŸ‘‰ Let's create a talk method inside the animal class. This can then be used by both our dog and cow objects.
-
class animal:
  species = None
  name = None
  sound = None
  # Sets the characteristics

  def __init__(self, name, species, sound):
    self.name = name
    self.species = species
    self.sound = sound

  def talk(self):
    print((f"{self.name} says {self.sound}")) 
  # 'self' means 'use the identifier given to the object that is accessing this method'. 
  # So If I use it with dog it will become 'dog.talk()' etc.

dog = animal("Happy", "Canine", "Woof")
dog.talk()

cow = animal("Betsy", "Bo Taurus", "Moo")
cow.talk()
-
TO BE CONTINUED

Day 66 GUIs
Today we learn how to create a Graphical User Interface (GUI) with a Python library called tkinter.
tkinter is one of the more popular Python GUI libraries.
When you start a tkinter project, you get some boilerplate, or starter code.
-
import tkinter as tk

window = tk.Tk()
window.title("Hello World") # Sets the name of the window in the border
window.geometry("300x300") # Sets the size of the window in pixels

hello = tk.Label(text = "Hello World") # Creates a text box
hello.pack() # 'pack' places the element on the screen

button = tk.Button(text = "Click me!") # Creates a button
button.pack()

tk.mainloop()
-
This code will produce a window

We can also use variables to pass strings into labels like this:
-
label = "Hey there world"
hello = tk.Label(text = label)
-
Now I'm going to use a subroutine that changes the text in the label when I click the button.
-
import tkinter as tk

window = tk.Tk()
window.title("Hello World") 
window.geometry("300x300") 

label = "Hey there world"

def updateLabel():
  label = "Bye world!"
  hello["text"] = label 
  # Subroutine that updates the text in the label.

hello = tk.Label(text = label) 
hello.pack() 

button = tk.Button(text = "Click me!", command = updateLabel) # Calls the updateLabel subroutine when the button is clicked
button.pack()

tk.mainloop()
-
Let's try the same trick, only this time the label contains a number which goes up with every button click. 
For this I need to use a global label variable.
-
import tkinter as tk

window = tk.Tk()
window.title("Hello World") 
window.geometry("300x300") 

label = 0 # Sets the starting label value to 0

def updateLabel():
  global label # Uses the values in the label variable
  label += 1 # Adds one to the value in the label
  hello["text"] = label 


hello = tk.Label(text = label) 
hello.pack() 

button = tk.Button(text = "Click me!", command = updateLabel) # Calls the updateLabel subroutine when the button is clicked
button.pack()

tk.mainloop()
-
We can add text boxes to our windows using the nifty text command.
-
import tkinter as tk

window = tk.Tk()
window.title("Hello World") 
window.geometry("300x300") 

label = 0

def updateLabel():
  global label
  label += 1 
  hello["text"] = label 


hello = tk.Label(text = label) 
hello.pack() 

button = tk.Button(text = "Click me!", command = updateLabel) 
button.pack()

text = tk.Text(window ,height=1, width = 50)
text.pack()
# Three arguments, name of the window to place the text box in, height & width
tk.mainloop()
-
FAILED CODE
Let's make our program add the number in the text box to the number in the label when the button is pressed.
To do this, we need to change the updateLabel subroutine.
-
def updateLabel():
  global label
  number = text.get("1.0","end") 
  # Gets the number from the text box and stores in the number variable
  number = int(number) #Casts to an integer.
  label += number # Adds the number from the text box to the one in the label.
  hello["text"] = label
-
TO BE CONTINUED

Day 67: tkinter
SES LESSON

Day 70: Secrets(replit)
There is a replit feature to store information in our code that we don't want others to be able to see. Like passwords and such.
We can make information like this secret in our repls by selecting 'secrets' from the left hand toolbar.
Secrets are a lot like dictionaries in that they have a key which is used to access a value.
SEE LESSON FOR MORE

Day 71: Hashing
A hash is produced by turning your password into a sequence of numbers, then passing it though a hashing algorithm 
(some mathematical process that is very difficult to reverse engineer). 
The data spit out of this hashing algorithm is what's stored instead of your actual password.
-
from replit import db

userName = "Joey"
password = "swoleAF"
password = hash(password)
db[userName] = password # Stores the hashed password in the database under the username key 'david'

print(password)
-
To login a user, we get their password, input it, hash it,
and compare it to the hash stored in the database because a string will always produce the same hashed value.
-
...
ask = input("Password >") # Get the input
ask = hash(ask) # Hash the input
if ask == db["david"]: #compare hash of input to stored hash.
  print("Login successful")
-
SALT
Hashing is great, but advanced hackers have created their own database containing hashes of pretty much every word.
To combat this, generate a random value and add it to the end of your password before hashing. This random value is called a salt.
-
from replit import db

password = "Baldy1"
salt = 10221

newPassword = f"{password}{salt}" # append the salt
newPassword = hash(newPassword) # hash the lot

print(newPassword)
-
If we have a second user with the same password, the uniquely generated salt  will produce a completely different hash.
To deal with this, we'd need our database to store the hashed password and the salt. We do this using a dictionary.
-
...
db["david"] = {"password":newPassword, "salt": salt}
-
Now update the login system tp pull the salt from the db, add it to the password entered and hash it all.
After, we compare it the stored hash of the password and salt from before
-
...
ans = input("Password >") # Get the input
salt = db["david"]["salt"] # Get the salt from the database.
newPassword = f"{ans}{salt}"
newPassword = hash(newPassword) # Hash the concatenated string

if newPassword == db["david"]["password"]: #compare hash of newPassword to stored hash.
  print("Login successful")
-
END LESSON 71

DAY 76: Flask
-
from flask import Flask # Import Flask Class

app = Flask(__name__) # Starts the Flask application. The 'app' variable is a current instance of the Flask application.


@app.route('/') # Route the Function
def index(): # Run the function
    return '(>l.l)>' # Render the template with a variable


@app.route('/home')  # Creates the path to the home page
def home():  # Subroutine to create the home page
    page = """
   ex: github profile script 
    """
    # Three quotes - I'm going to write or paste my HTML code here. The HTML gets assigned to the page variable
    return page  # returns the contents of the page variable


app.run(host='0.0.0.0', port=81) # Run the Application (in debug mode)
-

^ Must type /home at the end of the url to see the home page

