#from Replit

Day 1: Print Statements
To put anytext on screen, it has to be in quotes "", and those quotes have to be in brackets () with a lower case print in front.
A bunch of text is called a String.
Ex: print("Hello There")
Use the triple quote """ if you want to write a big chunk of text with gaps or line breaks.
Ex: print("""Anything that starts
with three quotes, and ends
in three quotes can span
many lines and even contain " symbols
within it without freaking anything out!""")

Day 2: Input
Input is when the user gives information to the computer.
It's very similar to the print command, except that it'll show the message in the console then wait until the user has typed something into the console and pressed enter.
Ex: input("What's your name?: ")
Input asks for something, takes it, but then has nowhere to put it. We can change that with a variable which is a value that we can use to name and store data.
You can give a variable any name you want, but you can't use spaces. You can use:
underscores_between_words (snake case)
camelCaseToMakeItEasierToRead
Ex: 
myName = input("What's you name? ")
myAge = input("How old are you? ")
You can print your variable using print and the name you used for your variable in your input command.
Ex:
print(myName)
print(myAge)

Day 57: Recursion
Recursion is a type of program where you get a subroutine to call itself. 
Recursion lets us solve problems in a more human way. 
Some mathematical problems can just be solved better using recursion.
Ex: We want to print out a sequence of the same emoji, reducing by 2 emojis per line. (eg print a row of 9, then a row of 7, then 5, etc. until we get none).
Ex:
def reverse(value):
  if value <= 0:
    print("Done!")
    return
  # This `if` provides the 'stop' condition for the program. Otherwise it would run forever.
  else: # if we're not at the stop condition.
    for i in range(value):
      print("ðŸ’¯", end="") # Outputs 'value' emojis
    print() # New line
    reverse(value - 2) # takes 2 off the value and calls the subroutine again with this new number. Eg if value was 7 it would call 'reverse(value)' again with value as 5.
reverse(5)

Day 58: Debugger
See lesson


