#from Replit

Day 1: Print Statements
To put any text on screen, it has to be in quotes "", and those quotes have to be in brackets () with a lower case print in front.
A bunch of text is called a String.
Ex: print("Hello There")
Use the triple quote """ if you want to write a big chunk of text with gaps or line breaks.
Ex: print("""Anything that starts
with three quotes, and ends
in three quotes can span
many lines and even contain " symbols
within it without freaking anything out!""")

Day 2: Input
Input is when the user gives information to the computer.
It's very similar to the print command, except that it'll show the message in the console then wait until the user has typed something into the console and pressed enter.
Ex: input("What's your name?: ")
-
Input asks for something, takes it, but then has nowhere to put it. 
We can change that with a variable which is a value that we can use to name and store data.
You can give a variable any name you want, but you can't use spaces. You can use:
underscores_between_words (snake case)
camelCaseToMakeItEasierToRead
Ex: 
myName = input("What's you name? ")
myAge = input("How old are you? ")
-
You can print your variable using print and the name you used for your variable in your input command.
Ex:
print(myName)
print(myAge)

Day 3: Concatenate
All it really means is combine text (remember, text is called a string) and variables together into single sentences!
EX:
myName = input("What's your name? ")
myLunch = input("What are you having for lunch? ")
print(myName, "is going to be chowing down on", myLunch, "very soon!")
-
With the print function, we can print out as many different things as we please. 
All we have to do is plant a comma , between every different thing in the ()
END LESSON

Day 57: Recursion
Recursion is a type of program where you get a subroutine to call itself. 
Recursion lets us solve problems in a more human way. 
Some mathematical problems can just be solved better using recursion.
Ex: We want to print out a sequence of the same emoji, reducing by 2 emojis per line. (eg print a row of 9, then a row of 7, then 5, etc. until we get none).
Ex:
def reverse(value):
  if value <= 0:
    print("Done!")
    return
  # This `if` provides the 'stop' condition for the program. Otherwise it would run forever.
  else: # if we're not at the stop condition.
    for i in range(value):
      print("ðŸ’¯", end="") # Outputs 'value' emojis
    print() # New line
    reverse(value - 2) # takes 2 off the value and calls the subroutine again with this new number. Eg if value was 7 it would call 'reverse(value)' again with value as 5.
reverse(5)
END LESSON

Day 58: Debugger
See lesson

Day 60: Unix Epoch
Computers use something called the Unix epoch to measure time.

It counts the amount of seconds elapsed since Jan 1st, 1970 (even when the power's off - there's a small battery on your motherboard that keeps this function running).
To use the Unix epoch, we first need to import the datetime library
Ex: import datetime
-
You can then insert a date and assign it to a variable. You HAVE to use the year -> month -> day format for your arguments.
Ex:
import datetime
myDate = datetime.date(year=2022, month=12, day= 7)
print(myDate)
# This code outputs '2022-12-07'
-
You can also use datetime to automatically get today's date.
Ex:
import datetime
today = datetime.date.today()
print(today)
# This code outputs the current date from your computer's clock.
-
...or you can get the date from the user as serperate variables.
Ex:
import datetime
day = int(input("Day: ")) # Get all input as numbers. We're not at text input for months yet.
month = int(input("Month: "))
year = int(input("Year: "))
date = datetime.date(year, month, day)
print(date)
-
Delta is a computer science term that means the difference between two things.
A time delta is a difference in time.
Ex:
import datetime

today = datetime.date.today() # Today's date

difference = datetime.timedelta(days=14) # The difference I want

newDate = today + difference # Add today to the delta difference to see the date in 14 days time.

print(newDate)
-
Provided you've formatted the date correctly, you can use the > == and < comparison operators just like you can with integers.
Ex:
import datetime

today = datetime.date.today() # Today's date

holiday = datetime.date(year = 2022, month = 10, day = 30) # The date of my holiday

if holiday > today: # If my holiday is in the future
  print("Coming soon")
elif holiday < today: #If my holiday date has passed
  print("Hope you enjoyed it")
else: # If my holiday date is today
  print("HOLIDAY TIME!")
-
END LESSON

Day 63: Multiple Files
Your programs can consist of more than one python file. 
The main file will always run first, but you can put parts of your code into other files and bring them in to main.py by importing.
In fact, you've already done this whenever you've used import random, import time, import os and so on. 
It's just that on those occasions, you were importing code written by someone else.
Put this into a new files and name it test.py. 
-
for i in range(10):
  print(i+1)
-
The .py is important to specify that it's a pyhton file.
Go to your main.py file and add this code.
-
import test # No need for the .py
-
Now run the code and watch the 'count to 10' program execute.
Like this we can't control when the 'count to 10' program runs. It just runs on import.
Back in your test.py file, you need to make the countdown program a subroutine.
-
def countdown():
  for i in range(10):
    print(i+1)
-
...and then call it in our main.py file.
-
import test
print("Countdown")
test.countdown() # Test refers to the file, countdown to the subroutine in that file.
-
If your file name is really long, you can give it a pseudonym, or nickname. 
This will save you time every time you want to run a subroutine from that file.
Use as to nickname your file. Here I've used tt for the test file.
-
import test as tt

print("Countdown")
tt.countdown()
-
END LESSON
